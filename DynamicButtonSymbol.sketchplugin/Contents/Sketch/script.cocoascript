// Dynamic Button Symbol (cmd j)
/*
  Heavily influenced by https://github.com/fuggfuggfugg/sketch-dynamic-button-3.5
*/

function alert(msg, title) {
  title = title || "alert";
  var app = [NSApplication sharedApplication];
  [app displayDialog:msg withTitle:title];
}

function getButtonDimensionsForLayer(layer){
  log("getButtonDimensionsForLayer: " + [layer frame])
  var frame = [layer frame]
  var layerHeight = [frame height],
      layerWidth =  [frame width],
      layerX =      [frame x],
      layerY =      [frame y]


  var splitLayer = [layer name].split(':');
  var offsetTop,offsetRight,offsetRight,offsetLeft;
  switch(splitLayer.length) {
    case 1:
      defVal = parseInt(splitLayer[0]) || 20;
      layer.name = defVal + ':' + defVal;
      offsetTop = offsetBottom = offsetRight = offsetLeft = defVal;
      break;
    case 2:
      offsetTop = offsetBottom = parseInt(splitLayer[0]) || 0;
      offsetRight = offsetLeft = parseInt(splitLayer[1]) || 0;
      break;
    case 3:
      offsetTop = parseInt(splitLayer[0]) || 0;
      offsetRight = offsetLeft = parseInt(splitLayer[1]) || 0;
      offsetBottom = parseInt(splitLayer[2]) || 0;
      break;
    case 4:
      offsetTop = parseInt(splitLayer[0]) || 0;
      offsetRight = parseInt(splitLayer[1]) || 0;
      offsetBottom = parseInt(splitLayer[2]) || 0;
      offsetLeft = parseInt(splitLayer[3]) || 0;
      break;
    default:
      alert('Wrong format', 'Error');
  }
  return {
    x: layerX,
    y: layerY,
    width: layerWidth,
    height: layerHeight,
    offsetTop: offsetTop,
    offsetBottom: offsetBottom,
    offsetLeft: offsetLeft,
    offsetRight: offsetRight,
    totalWidth: (layerWidth + offsetLeft  + offsetRight),
    totalHeight: (layerHeight + offsetTop  + offsetBottom)
  }
}

function onRun(context) {
  var selection = context.selection;
  var doc = context.document;

  if ([selection count] == 0) {
    alert('You need to select a Button Symbol', 'Selection is empty');
    return;
  }
  var symbol = selection[0];
  if (symbol) {
    var master = [symbol symbolMaster];
    var layers = master.layers();
    var overrides = symbol.overrides();
    var textOverride = overrides.objectForKey(0);
    if (textOverride) {
      var text = [[textOverride allValues] objectAtIndex:0];

      var layer = layers[1];
      var oldValue = layer.stringValue();
      layer.setStringValue(text);
      var buttonDimensions = getButtonDimensionsForLayer(layer)
      var frame = [symbol frame]
      [frame setHeight:buttonDimensions.totalHeight]
      [frame setWidth:buttonDimensions.totalWidth]
      layer.setStringValue(oldValue);
    }
  }
}

function onCreate(context) {
  var sketch = context.api();
  var doc = context.document;
  var page = doc.currentPage();

  var paddingLeft = sketch.getStringFromUser("Padding left", "10");
  var paddingRight = sketch.getStringFromUser("Padding right", "10");
  var paddingTop = sketch.getStringFromUser("Padding top", "10");
  var paddingBottom = sketch.getStringFromUser("Padding bottom", "10");
  var padding = {
    top: parseInt(paddingTop, 10),
    right: parseInt(paddingRight, 10),
    bottom: parseInt(paddingBottom, 10),
    left: parseInt(paddingLeft, 10)
  };

  var textLayer = addTextLayer(page, padding);
  var rectLayer = addLayerOfRectType(page, textLayer, padding);

  page.addLayers([rectLayer, textLayer]);
  textLayer.setIsSelected(true);
  rectLayer.setIsSelected(true);

  var symbols = doc.documentData().layerSymbols()
  var symbolAction = doc.actionsController().actionWithID("MSCreateSymbolAction");
  if (!symbolAction.validate()) {
    exitWithAlert('Could not create symbol.')
  }
  symbolAction.doPerformAction(nil)
}

function addTextLayer(parent, padding) {
  var textLayer = MSTextLayer.new();
  textLayer.setStringValue('|');
  textLayer.name = padding.top + ":" +  padding.right + ":" + padding.bottom + ":" + padding.left;
  textLayer.resizingType = 1;
  return textLayer;
}

function addLayerOfRectType(parent, textLayer, padding) {
    var rect = textLayer.rect();
    var style = MSDefaultStyle.defaultStyle();
    var rectShape = MSRectangleShape.alloc().init();
    var container = MSShapeGroup.alloc().init();
    var addedHeight = padding.top + padding.bottom;
    var addedWidth = padding.left + padding.right;
    rectShape.frame = MSRect.rectWithRect(rect);

    container.addLayers([rectShape]);
    container.style().addStylePartOfType(0);
    container.name = "BG";
    container.resizeToFitChildrenWithOption(1);

    var fill = container.style().fills().firstObject();
    fill.color = MSColor.colorWithRed_green_blue_alpha(.8, .8, .8, 1);

    var frame = [container frame];
    var textHeight = [[textLayer frame] height];
    var textWidth = [[textLayer frame] width];
    [frame setHeight:textHeight + addedHeight]
    [frame  setWidth:textWidth + addedWidth + 500]
    frame.x = -padding.left;
    frame.y = -padding.top;

    return container;
}